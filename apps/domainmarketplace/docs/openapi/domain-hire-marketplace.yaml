openapi: 3.1.0
info:
  title: Domain Hire Marketplace API (MVP)
  version: 0.1.0
  description: |
    MVP endpoints for domains, listings, hires, routes, analytics, and billing.
    Auth via Bearer JWT/session. Stripe webhooks verified by signature.
servers:
  - url: https://api.example.com
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    Domain:
      type: object
      properties:
        id: { type: string, format: uuid }
        fqdn: { type: string }
        verificationStatus: { type: string, enum: [pending, verified, failed] }
        verificationMethod:
          type: string
          enum: [cf_saas, domain_connect, manual]
          nullable: true
        verifiedAt:
          type: string
          format: date-time
          nullable: true
        cnameTarget:
          type: string
          nullable: true
      required:
        - id
        - fqdn
        - verificationStatus
    Listing:
      type: object
      properties:
        id: { type: string, format: uuid }
        domainId: { type: string, format: uuid }
        mode: { type: string, enum: [exclusive, shared_slugs] }
        pricePeriodCents: { type: integer, nullable: true }
        priceClickCents: { type: integer, nullable: true }
        status: { type: string, enum: [draft, active, paused] }
    Hire:
      type: object
      properties:
        id: { type: string, format: uuid }
        listingId: { type: string, format: uuid }
        hirerId: { type: string, format: uuid }
        type: { type: string, enum: [period, per_click] }
        status: { type: string, enum: [active, ended, suspended] }
    Route:
      type: object
      properties:
        id: { type: string, format: uuid }
        hireId: { type: string, format: uuid }
        host: { type: string }
        path: { type: string }
        targetUrl: { type: string, format: uri }
        redirectCode: { type: integer, enum: [301, 302, 307, 308] }
    AnalyticsSummary:
      type: object
      properties:
        validClicks: { type: integer }
        invalidClicks: { type: integer }
        byGeo:
          type: array
          items: { type: object, properties: { country: { type: string }, count: { type: integer } } }
paths:
  /api/v1/domains:
    post:
      summary: Create domain
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fqdn]
              properties:
                fqdn: { type: string }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Domain' } } } }
        '400': { description: Bad Request, content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } } }
  /api/v1/domains/{id}:
    get:
      summary: Get domain
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Domain' } } } }
        '404': { description: Not Found }
  /api/v1/domains/{id}/verify:
    post:
      summary: Verify domain control
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [method]
              properties:
                method: { type: string, enum: [cf_saas, domain_connect, manual] }
                returnUrl: { type: string, nullable: true, format: uri }
      responses:
        '202':
          description: Verification started
          content:
            application/json:
              schema:
                type: object
                properties:
                  verificationMethod:
                    type: string
                    enum: [cf_saas, domain_connect, manual]
                    nullable: true
                  verificationStatus:
                    type: string
                    enum: [pending, verified, failed]
                  txtRecord:
                    type: object
                    nullable: true
                    properties:
                      name: { type: string }
                      value: { type: string }
                  httpToken:
                    type: object
                    nullable: true
                    properties:
                      url: { type: string, format: uri }
                      body: { type: string }
                  redirectUrl:
                    type: string
                    format: uri
                    nullable: true
                  instructions:
                    type: object
                    nullable: true
                    properties:
                      type: { type: string }
                      cnameTarget: { type: string }
        '200':
          description: Verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  verificationMethod:
                    type: string
                    enum: [cf_saas, domain_connect, manual]
                    nullable: true
                  verificationStatus:
                    type: string
                    enum: [pending, verified, failed]
        '400': { description: Bad Request }
  /api/v1/domains/{id}/status:
    get:
      summary: Get domain verification status
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Domain' } } } }
        '404': { description: Not Found }
  /api/v1/listings:
    get:
      summary: Search listings
      parameters:
        - in: query
          name: search
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Listing' }
    post:
      summary: Create listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [domainId, mode]
              properties:
                domainId: { type: string }
                mode: { type: string, enum: [exclusive, shared_slugs] }
                pricePeriodCents: { type: integer, nullable: true }
                priceClickCents: { type: integer, nullable: true }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Listing' } } } }
  /api/v1/listings/{id}:
    get:
      summary: Get listing
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Listing' } } } }
        '404': { description: Not Found }
    patch:
      summary: Update listing status
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string, enum: [draft, active, paused] }
      responses:
        '200': { description: OK }
  /api/v1/hires:
    post:
      summary: Create hire
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [listingId, type]
              properties:
                listingId: { type: string }
                type: { type: string, enum: [period, per_click] }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Hire' } } } }
  /api/v1/hires/{id}:
    get:
      summary: Get hire
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Hire' } } } }
        '404': { description: Not Found }
  /api/v1/hires/{id}/routes:
    get:
      summary: List routes for hire
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Route' }
    post:
      summary: Add route to hire
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [host, path, targetUrl, redirectCode]
              properties:
                host: { type: string }
                path: { type: string, pattern: "^(\\/[^?#]*)?$" }
                targetUrl: { type: string, format: uri }
                redirectCode: { type: integer, enum: [301, 302, 307, 308] }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Route' } } } }
  /api/v1/hires/{id}/routes/{routeId}:
    patch:
      summary: Update hire route
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: path
          name: routeId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                host: { type: string }
                path: { type: string, pattern: "^(\\/[^?#]*)?$" }
                targetUrl: { type: string, format: uri }
                redirectCode: { type: integer, enum: [301, 302, 307, 308] }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Route' } } } }
    delete:
      summary: Delete hire route
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: path
          name: routeId
          required: true
          schema: { type: string }
      responses:
        '204': { description: No Content }
  /api/v1/hires/{id}/routes/bulk:
    post:
      summary: Bulk create hire routes
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required: [host, path, targetUrl, redirectCode]
                properties:
                  host: { type: string }
                  path: { type: string, pattern: "^(\\/[^?#]*)?$" }
                  targetUrl: { type: string, format: uri }
                  redirectCode: { type: integer, enum: [301, 302, 307, 308] }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  created:
                    type: array
                    items: { $ref: '#/components/schemas/Route' }
                  failed:
                    type: array
                    items:
                      type: object
                      properties:
                        index: { type: integer }
                        errors:
                          type: array
                          items:
                            type: object
                            properties:
                              field: { type: string }
                              message: { type: string }
                  summary:
                    type: object
                    properties:
                      total: { type: integer }
                      created: { type: integer }
                      failed: { type: integer }
  /api/v1/hires/{id}/analytics:
    get:
      summary: Analytics summary
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
        - in: query
          name: range
          schema: { type: string, example: '30d' }
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/AnalyticsSummary' } } } }
  /api/v1/billing/period/checkout:
    post:
      summary: Start period hire checkout
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [hireId]
              properties:
                hireId: { type: string }
      responses:
        '200': { description: OK }
  /api/v1/billing/usage/report:
    post:
      summary: Report usage (internal)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [hireId, clicks]
              properties:
                hireId: { type: string }
                clicks: { type: integer }
      responses:
        '202': { description: Accepted }
  /api/v1/webhooks/stripe:
    post:
      summary: Stripe webhook
      security: []
      responses:
        '200': { description: OK }

